syntax = "proto3";

package model.protos;

import "model/protos/options.proto";

/* cmd_id == 1 */
message InverterHeartbeat {
    optional uint32 invErrCode = 1;
    optional uint32 invWarnCode = 3;
    optional uint32 pv1ErrCode = 2;
    optional uint32 pv1WarnCode = 4;
    optional uint32 pv2ErrCode = 5;
    optional uint32 pv2WarningCode = 6;
    optional uint32 batErrCode = 7;
    optional uint32 batWarningCode = 8;
    optional uint32 llcErrCode = 9;
    optional uint32 llcWarningCode = 10;
    optional uint32 pv1Status = 11;
    optional uint32 pv2Status = 12;
    optional uint32 batStatus = 13;
    optional uint32 llcStatus = 14;
    optional uint32 invStatus = 15;
    optional int32 pv1InputVolt = 16 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 pv1OpVolt = 17 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 pv1InputCur = 18 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 pv1InputWatts = 19 [(mapping_options) = { divisor: 10, unit: "W" }];
    optional int32 pv1Temp = 20 [(mapping_options) = {divisor: 10, unit: "°C" }];
    optional int32 pv2InputVolt = 21[(mapping_options) = {divisor: 10, unit: "V"}];
    optional int32 pv2OpVolt = 22 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 pv2InputCur = 23 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 pv2InputWatts = 24 [(mapping_options) = { divisor: 10, unit: "W"}];
    optional int32 pv2Temp = 25 [(mapping_options) = {divisor: 10, unit: "°C" }];
    optional int32 batInputVolt = 26 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 batOpVolt = 27 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 batInputCur = 28 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 batInputWatts = 29 [(mapping_options) = { divisor: 10, unit: "W"}];
    optional int32 batTemp = 30 [(mapping_options) = {divisor: 10, unit: "°C" }];
    optional uint32 batSoc = 31 [(mapping_options) = {unit: "%" }];
    optional int32 llcInputVolt = 32 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 llcOpVolt = 33 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 llcTemp = 34 [(mapping_options) = {divisor: 10, unit: "°C" }];
    optional int32 invInputVolt = 35 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 invOpVolt = 36 [(mapping_options) = {divisor: 10, unit: "V" }];
    optional int32 invOutputCur = 37 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 invOutputWatts = 38 [(mapping_options) = { divisor: 10, unit: "W"}];
    optional int32 invTemp = 39 [(mapping_options) = {divisor: 10, unit: "°C" }];
    optional int32 invFreq = 40 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 invDcCur = 41 [(mapping_options) = {divisor: 10, unit: "A" }];
    optional int32 bpType = 42;
    optional int32 invRelayStatus = 43;
    optional int32 pv1RelayStatus = 44;
    optional int32 pv2RelayStatus = 45;
    optional uint32 installCountry = 46;
    optional uint32 installTown = 47;
    optional uint32 permanentWatts = 48 [(mapping_options) = { divisor: 10, unit: "W"}];
    optional uint32 dynamicWatts = 49 [(mapping_options) = { divisor: 10, unit: "W"}];
    optional uint32 supplyPriority = 50;
    optional uint32 lowerLimit = 51 [(mapping_options) = { unit: "%" }];
    optional uint32 upperLimit = 52 [(mapping_options) = { unit: "%" }];
    optional uint32 invOnOff = 53;
    optional uint32 wirelessErrCode = 54;
    optional uint32 wirelessWarnCode = 55;
    optional uint32 invBrightness = 56 [(mapping_options) = { divisor: 10, unit: "%" }];
    optional uint32 heartbeatFrequency = 57;
    optional uint32 ratedPower = 58 [(mapping_options) = { divisor: 10, unit: "W" }];
    optional int32 batChargingTime = 59 [(mapping_options) = { converter: "minutes" }];
    optional int32 batDischargingTime = 60 [(mapping_options) = { converter: "minutes" }];
}

message InverterHeartbeat2 {
    int32 X_Unknown_1 = 1;
    int32 X_Unknown_2 = 2;
    int32 X_Unknown_3 = 3;
    int32 X_Unknown_4 = 4;
    int32 X_Unknown_5 = 5;
    int32 X_Unknown_6 = 6;
    int32 X_Unknown_7 = 7;
    int32 X_Unknown_8 = 8;
    int32 X_Unknown_9 = 9;
    int32 X_Unknown_10 = 10;
    int32 X_Unknown_11 = 11;
    int32 X_Unknown_12 = 12;
    int32 X_Unknown_13 = 13;
    int32 X_Unknown_14 = 14;
    int32 X_Unknown_15 = 15;
    int32 X_Unknown_16 = 16;
    int32 X_Unknown_17 = 17;
    int32 X_Unknown_18 = 18;
    int32 X_Unknown_19 = 19;
    int32 X_Unknown_20 = 20;
    int32 X_Unknown_21 = 21;
    int32 X_Unknown_22 = 22;
    int32 X_Unknown_23 = 23;
    int32 X_Unknown_24 = 24;
    int32 X_Unknown_25 = 25;
    int32 X_Unknown_26 = 26;
    int32 X_Unknown_27 = 27;
    int32 X_Unknown_28 = 28;
    int32 X_Unknown_29 = 29;
    int32 X_Unknown_30 = 30;
    int32 X_Unknown_31 = 31;
    int32 X_Unknown_32 = 32;
    int32 X_Unknown_33 = 33;
    int32 X_Unknown_34 = 34;
    int32 X_Unknown_35 = 35;
    int32 X_Unknown_36 = 36;
    int32 X_Unknown_37 = 37;
    int32 X_Unknown_38 = 38;
    int32 X_Unknown_39 = 39;
    int32 X_Unknown_40 = 40;
    int32 X_Unknown_41 = 41;
    int32 X_Unknown_42 = 42;
    int32 X_Unknown_43 = 43;
    int32 X_Unknown_44 = 44;
    int32 X_Unknown_45 = 45;
    int32 X_Unknown_46 = 46;
    int32 X_Unknown_47 = 47;
    int32 X_Unknown_48 = 48;
    int32 X_Unknown_49 = 49;
    int32 X_Unknown_50 = 50;
    int32 X_Unknown_51 = 51;
    int32 X_Unknown_52 = 52;
 }

message Header {
	optional bytes pdata = 1;
    optional int32 src = 2;
    optional int32 dest = 3;
    optional int32 d_src= 4;
    optional int32 d_dest = 5;
    optional int32 enc_type = 6;
    optional int32 check_type = 7;
    optional int32 cmd_func = 8;
    optional int32 cmd_id = 9;
    optional int32 data_len = 10;
    optional int32 need_ack = 11;
    optional int32 is_ack = 12;
    optional int32 seq = 14;
    optional int32 product_id = 15;
    optional int32 version = 16;
    optional int32 payload_ver = 17;
    optional int32 time_snap = 18;
    optional int32 is_rw_cmd = 19;
    optional int32 is_queue = 20;
    optional int32 ack_type= 21;
    optional string code = 22;
    optional string from = 23;
    optional string module_sn = 24;
    optional string device_sn = 25;

}

message SendHeaderMsg {
    repeated Header msg = 1;
}

message SetMessage {
    Header msg = 1;
}

message SetValue {
    optional int32 value = 1;
}